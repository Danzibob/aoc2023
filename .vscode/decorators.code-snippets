{
	// Place your aoc2022 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Solver Decorator": {
		"scope": "rust",
		"prefix": ["solve"],
		"body": [
			"#[aoc($TM_FILENAME_BASE, part${1|1,2|})]",
			"pub fn solve_part$1(input: &str) -> ${3|u32,u64|} {",
			"$0",
			"}"
		],
		"description": "Solve macro for all AoC files, using chars as input"
	},
	"Solver Decorator (Bytes)": {
		"scope": "rust",
		"prefix": ["solve (bytes)"],
		"body": [
			"#[aoc($TM_FILENAME_BASE, part${1|1,2|}, Bytes)]",
			"pub fn solve_part$1(input: &[u8]) -> ${3|u32,u64|} {",
			"$0",
			"}"
		],
		"description": "Solve macro for all AoC files, using bytes as input"
	},
	"Generator Decorator": {
		"scope": "rust",
		"prefix": ["gen","generator"],
		"body": [
			"#[aoc_generator($TM_FILENAME_BASE)]",
			"pub fn input_generator(input: &str) -> $1 {",
			"$0",
			"}"
		]
	},
	"Generator Decorator (Bytes)": {
		"scope": "rust",
		"prefix": ["gen (bytes)","generator (bytes)"],
		"body": [
			"#[aoc_generator($TM_FILENAME_BASE, Bytes)]",
			"pub fn input_generator(input: &[u8]) -> $1 {",
			"$0",
			"}"
		]
	},
	"Test Suite": {
		"scope": "rust",
		"prefix": ["mod tests"],
		"body": [
			"#[cfg(test)]",
			"mod tests {",
			"	use super::*;",
			"",
			"	const TEST_INPUT:&str = include_str!(\"../test_input/$CURRENT_YEAR/$TM_FILENAME_BASE.txt\");",
			"",
			"	#[test]",
			"	fn $1() {",
			"		$0",
			"	}",
			"}"
		]
	}
}